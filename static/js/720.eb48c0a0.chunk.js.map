{"version":3,"file":"static/js/720.eb48c0a0.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/style-to-object/index.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/remark-parse/index.js","../node_modules/remark-parse/lib/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/style-to-object/index.mjs","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/remark-gfm/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                // @ts-expect-error: to do: update `mdast-util-types` to allow explicit `undefined`s.\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","u","b","Symbol","for","d","e","f","g","h","k","l","n","p","q","t","v","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","parse","require","StyleToObject","iterator","output","hasIterator","len","element","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","blankLine","tokenize","effects","ok","nok","factorySpace","code","markdownLineEnding","partial","max","limit","Number","POSITIVE_INFINITY","size","markdownSpace","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","apply","classifyCharacter","combineExtensions","extensions","all","index","syntaxExtension","extension","hook","left","undefined","right","constructs","existing","before","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","_inherits","subClass","superClass","create","setPrototypeOf","_getPrototypeOf","o","getPrototypeOf","bind","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_assertThisInitialized","self","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","result","Super","NewTarget","_construct","Parent","args","Class","instance","Function","_wrapNativeSuper","_cache","Map","fn","indexOf","has","get","set","Wrapper","stringifyPosition","point","VFileMessage","_Error","_super","place","origin","_this","_classCallCheck","parts","message","stack","fatal","ruleId","file","actual","expected","url","note","_createClass","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","_toConsumableArray","assertNonEmpty","assertPart","stem","encoding","part","_toArray","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","bail","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","_len2","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","concat","wrap","use","middelware","unified","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","_attachers$freezeInde","attacher","transformer","settings","addPlugin","addList","addPreset","assign","_value","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","children","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","disable","null","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","search","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","fragment","ordered","spread","checked","compiler","postprocess","defaultConstructs","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","_combined$key","_combined$key2","normalizeUri","skip","encodeURIComponent","visit","visitor","reverse","visitParents","parents","parent","pointStart","pointEnd","clean","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","_objectSpread","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","_tail$children","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","pow","checks","types","DefinedInfo","_Info","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","_parent$children","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","_unused","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkParse","remarkPlugins","remarkRehype","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","PropTypes","www","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","namedCharacterReference","punctuationContinuation","punctuation","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","wwwAutolink","previousWww","previousUnbalanced","httpAutolink","previousHttp","t1","t2","s","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","_gfmAutolinkLiteralWalkedInto","indent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","gfmFootnotes","replacement","callStart","callData","callEscape","labelAtMarker","labelInside","whitespaceAfter","gfmStrikethrough","single","singleTilde","strikethrough","gfmTable","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","inHead","inDelimiterRow","inRow","cellStart","seenCellInRow","tasklistCheck","spaceThenNonSpace","gfmTaskListItem","ccount","character","findAndReplace","RegExp","ignored","convert","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","_nodes","global","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","email","association","repeat","eol","patternCompile","_compiled","patternInScope","listInScope","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","encode","whole","track","lineShift","move","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","safeOptions","tracker","subexit","indentLines","indexStack","createTracker","handle","bulletLastUsed","containerFlow","blank","containerPhrasing","peek","handleDelete","gfmStrikethroughFromMarkdown","gfmStrikethroughToMarkdown","defaultStringLength","toAlignment","gfmTableFromMarkdown","tableData","enterCell","tableHeader","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","incrementListMarker","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","castFactory","typeFactory","anyFactory","propsFactory","tests","_checks$index","factory","subresult","grandparents","toResult"],"sourceRoot":""}